#!/usr/bin/env python

import rospy
import requests
import json
import sys

def handle_gate_code_request():
	# define the server's url
	try:
		url = 'http://127.0.0.1:3000/Gate'
		# create a request object and pass the url and a payload
		# if any, as r = request.get(url, data = payload)
		# payload = {"course":"courseA", "team":"propagator"}
		r = requests.get(url)
		# evaluating status code response from server
		# and interpreting the response json object
		if(r.status_code == 200):
			print(r.json())
			#turning json object into a python dictionaty and 
			# retreiving desired value
			gateCode = r.json()['gateCode']
			if(gateCode == '(1,X)'):
				entrance = 1
				exit = 'X'
			elif(gateCode == '(1,Y)'):
				entrance = 1
				exit = 'Y'
			elif(gateCode =='(1,Z)'):
				entrance = 1
				exit = 'Z'
			elif(gateCode == '(2,X)'):
				entrance = 2
				exit = 'X'
			elif(gateCode == '(2,Y)'):
				entrance = 2
				exit = 'Y'
			elif(gateCode =='(2,Z)'):
				entrance = 2
				exit = 'Z'
			elif(gateCode == '(3,X)'):
				entrance = 3
				exit = 'X'
			elif(gateCode == '(3,Y)'):
				entrance = 3
				exit = 'Y'
			elif(gateCode =='(3,Z)'):
				entrance = 3
				exit = 'Z'
		elif(r.status_code == 400):
			raise ValueError('BadReqest')
		elif(r.status_code == 404):
			raise ValueError('TeamOrCourseNotFound')
		elif(r.status_code == 500):
			raise ValueError('GateIsBroken')
		else:
			raise ValueError('SomethingWrong')

	    #returning the value of the entrance and the value 
	    #of the exit gates
    	return  GateCodeResponse(entrance, exit)
    except ValueError:
    	pass	


def main():
	rospy.init_node('gatecode_request_server')
	service = rospy.Service('gate_code_request', GateCodeRequest, handle_gate_code_request)
	rospy.spin()

if __name__ == '__main__':
	main()			
